/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;
import java.util.*;
import java.util.ArrayList;

public class Library {


    public static void main(String[] args) {

        // to test roll method
        int[] rollsValues = roll(3);
        for (int element : rollsValues) {
            System.out.println(element);
        }

        // array for testing
        int[] testArr = {1, 2, 3, 4, 5, 5};

        // test containsDuplicates method
        System.out.println(containsDuplicates(testArr));

        //  test CalculateAverage method
        System.out.println(CalculateAverage(testArr));

        //  test lowestAverage method
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };

        float[] lowestAverage = lowestAverage(weeklyMonthTemperatures);
        System.out.println(lowestAverage[0]);

// Daily average temperatures for Seattle, October 1-28 2017
//        int[][] weeklyMonthTemperatures = {
//                {66, 64, 58, 65, 71, 57, 60},
//                {57, 65, 65, 70, 72, 65, 51},
//                {55, 54, 60, 53, 59, 57, 61},
//                {65, 56, 55, 52, 55, 62, 57}
//        };

        analyzingWeatherData(weeklyMonthTemperatures);

        // within your main method...
        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        String winner = tally(votes);
        System.out.println(winner + " received the most votes!");
    }

    /**
     * @param rollCount: number of rolls
     * @return: an array containing the rolls values
     */
    public static int[] roll(int rollCount) {
        int[] rollsValues = new int[rollCount];
        int min = 1;
        int max = 6;
        for (int i = 0; i < rollsValues.length; i++) {
            rollsValues[i] = (int) (Math.random() * ((max - min) + 1)) + min;
        }
        return rollsValues;
    }

    /**
     * @param arr: array
     * @return: true or false depending on whether the array contains duplicate values
     */
    public static boolean containsDuplicates(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length; j++) {
                if (i != j) {
                    if (arr[i] == arr[j]) {
                        return true;
                    }
                }

            }
        }
        return false;
    }

    /**
     * @param arr: array of integer
     * @return: the array average
     */
    public static float CalculateAverage(int[] arr) {
        float total = 0;
        for (int num : arr) {
            total += num;
        }
        return total / arr.length;
    }

    /**
     * @param arrayOfArrays
     * @return: array with the lowest average
     */

    public static float[] lowestAverage(int[][] arrayOfArrays) {
        float[] lowestAverage = new float[1];
        float[] arraysAverages = new float[arrayOfArrays.length];
        for (int i = 0; i < arrayOfArrays.length; i++) {
            arraysAverages[i] = CalculateAverage(arrayOfArrays[i]);
//            System.out.println(arraysAverages[i]);
        }

        lowestAverage[0] = arraysAverages[0];
        for (int i = 0; i < arraysAverages.length; i++) {
            if (arraysAverages[i] < lowestAverage[0]) {
                lowestAverage[0] = arraysAverages[i];
            }
        }
        return lowestAverage;
    }

    /**
     * @param wetherData: Daily average temperatures for Seattle
     * @return: temperatures that not seen
     */
    public static ArrayList<Integer> analyzingWeatherData(int[][] wetherData) {
        ArrayList<Integer> temNotSeen = new ArrayList<>();
        Set<Integer> hashSet = new HashSet<Integer>();

        for (int i = 0; i < wetherData.length; i++) {
            for (int j = 0; j < wetherData[i].length; j++) {
                hashSet.add(wetherData[i][j]);
            }
        }
        //find the max and the min temperature
        int maxTemp = Collections.max(hashSet);
        int minTemp = Collections.min(hashSet);
        System.out.println("High: " + maxTemp);
        System.out.println("Low: " + minTemp);

        // find the temperatures that not seen
        for (int temp = minTemp; temp < maxTemp; temp++) {
            if (!hashSet.contains(temp)) {
                temNotSeen.add(temp);
                System.out.println("Never saw temperature: " + temp);
            }
        }


        return temNotSeen;
    }

    /**
     * @param votes
     * @return: winner
     */
    public static String tally(List<String> votes) {
        String winner = null;
        int numberOfWinnerVotes = 0;
        for (String person : votes) {
            if (Collections.frequency(votes, person) > numberOfWinnerVotes) {
                winner = person;
                numberOfWinnerVotes = Collections.frequency(votes, person);
            }
        }
        return winner;
    }

}
